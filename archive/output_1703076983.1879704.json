{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 14}, "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_a_login>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000001B4C38E6570>\nkey = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_a_login", "rerun": "0"}, "1": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_b_home>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000001B4C38E6570>\nkey = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_b_home", "rerun": "0"}, "2": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_c_forms>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000001B4C38E6570>\nkey = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_c_forms", "rerun": "0"}, "3": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_d_checklistreport>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000001B4C38E6570>\nkey = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_d_checklistreport", "rerun": "0"}, "4": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_e_formfilledreports>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000001B4C38E6570>\nkey = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_e_formfilledreports", "rerun": "0"}, "5": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_f_defaultreport>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000001B4C38E6570>\nkey = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_f_defaultreport", "rerun": "0"}, "6": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_g_agingreport>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000001B4C38E6570>\nkey = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_g_agingreport", "rerun": "0"}, "7": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_h_assign>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000001B4C38E6570>\nkey = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_h_assign", "rerun": "0"}, "8": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_i_actiontracker>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000001B4C38E6570>\nkey = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_i_actiontracker", "rerun": "0"}, "9": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_j_establishrealation>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000001B4C38E6570>\nkey = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_j_establishrealation", "rerun": "0"}, "10": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_k_calendar>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000001B4C38E6570>\nkey = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_k_calendar", "rerun": "0"}, "11": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_l_actionstage>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000001B4C38E6570>\nkey = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_l_actionstage", "rerun": "0"}, "12": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_m_assettype>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000001B4C38E6570>\nkey = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_m_assettype", "rerun": "0"}, "13": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_n_group>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000001B4C38E6570>\nkey = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_n_group", "rerun": "0"}}, "suite_name": "test_runfile/test_end_to_end.py"}}}, "date": "December 20, 2023", "start_time": 1703075575.2875094, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "14", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "14"}