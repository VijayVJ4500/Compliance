{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 15}, "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_a_login>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(executable_path=config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000002478E456B10>, key = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_a_login", "rerun": "0"}, "1": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_b_home>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(executable_path=config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000002478E456B10>, key = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_b_home", "rerun": "0"}, "2": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_c_forms>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(executable_path=config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000002478E456B10>, key = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_c_forms", "rerun": "0"}, "3": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_d_checklistreport>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(executable_path=config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000002478E456B10>, key = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_d_checklistreport", "rerun": "0"}, "4": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_e_formfilledreports>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(executable_path=config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000002478E456B10>, key = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_e_formfilledreports", "rerun": "0"}, "5": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_f_defaultreport>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n>           driver = webdriver.Chrome(options=options)\n\ntest_runfile\\conftest.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:56: in __init__\n    super().__init__(\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:208: in __init__\n    self.start_session(capabilities)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002478F095070>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: unable to discover open window i...07FF6095788C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFFBB3B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFFBC5CAA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: unable to discover open window in chrome\nE         (Session info: chrome=120.0.6099.131)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF609962142+3514994]\nE       \t(No symbol) [0x00007FF609580CE2]\nE       \t(No symbol) [0x00007FF6094276AA]\nE       \t(No symbol) [0x00007FF6093FFEB4]\nE       \t(No symbol) [0x00007FF6094A0B7C]\nE       \t(No symbol) [0x00007FF609495D93]\nE       \t(No symbol) [0x00007FF609464BDC]\nE       \t(No symbol) [0x00007FF609465C64]\nE       \tGetHandleVerifier [0x00007FF60998E16B+3695259]\nE       \tGetHandleVerifier [0x00007FF6099E6737+4057191]\nE       \tGetHandleVerifier [0x00007FF6099DE4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF6096B04F9+689705]\nE       \t(No symbol) [0x00007FF60958C048]\nE       \t(No symbol) [0x00007FF609588044]\nE       \t(No symbol) [0x00007FF6095881C9]\nE       \t(No symbol) [0x00007FF6095788C4]\nE       \tBaseThreadInitThunk [0x00007FFFBB3B257D+29]\nE       \tRtlUserThreadStart [0x00007FFFBC5CAA58+40]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException\n", "test_name": "test_f_defaultreport", "rerun": "0"}, "6": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_g_agingreport>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(executable_path=config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000002478E456B10>, key = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_g_agingreport", "rerun": "0"}, "7": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_h_assign>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(executable_path=config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000002478E456B10>, key = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_h_assign", "rerun": "0"}, "8": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_i_actiontracker>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(executable_path=config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000002478E456B10>, key = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_i_actiontracker", "rerun": "0"}, "9": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_j_establishrealation>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(executable_path=config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000002478E456B10>, key = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_j_establishrealation", "rerun": "0"}, "10": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_k_calendar>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(executable_path=config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000002478E456B10>, key = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_k_calendar", "rerun": "0"}, "11": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_l_actionstage>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(executable_path=config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000002478E456B10>, key = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_l_actionstage", "rerun": "0"}, "12": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_m_assettype>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(executable_path=config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000002478E456B10>, key = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_m_assettype", "rerun": "0"}, "13": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_n_group>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(executable_path=config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000002478E456B10>, key = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_n_group", "rerun": "0"}, "14": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_o_compcode>>\n\n    @pytest.fixture()\n    def setup(request):\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = webdriver.ChromeOptions()\n            # service_obj = Service(config['cm']['CHROME_DRIVER_LOCATION'])\n            # driver = webdriver.Chrome(service=service_obj)\n            driver = webdriver.Chrome(options=options)\n    \n    \n        elif browser_name == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            driver = webdriver.Firefox(options=options)\n    \n        elif browser_name == \"edge\":\n            options = webdriver.EdgeOptions()\n            service_obj = Service(executable_path=config['cm']['MS_EDGE_DRIVER_LOCATION'])\n            driver = webdriver.Edge(service=service_obj, options=options)\n    \n        elif browser_name == \"headless\":\n            options = Options()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n    \n>       driver.get(config['cm']['TEST_URL'])\n\ntest_runfile\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x000002478E456B10>, key = 'cm'\n\n    def __getitem__(self, key):\n        if key != self.default_section and not self.has_section(key):\n>           raise KeyError(key)\nE           KeyError: 'cm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\configparser.py:941: KeyError\n", "test_name": "test_o_compcode", "rerun": "0"}}, "suite_name": "test_runfile/test_end_to_end.py"}}}, "date": "January 05, 2024", "start_time": 1704454876.0471482, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "15", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "15"}